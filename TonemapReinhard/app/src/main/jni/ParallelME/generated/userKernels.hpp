/**                                               _    __ ____
 *   _ __  ___ _____   ___   __  __   ___ __     / |  / /  __/
 *  |  _ \/ _ |  _  | / _ | / / / /  / __/ /    /  | / / /__
 *  |  __/ __ |  ___|/ __ |/ /_/ /__/ __/ /__  / / v  / /__
 *  |_| /_/ |_|_|\_\/_/ |_/____/___/___/____/ /_/  /_/____/
 *
 * Code created automatically by ParallelME compiler.
 */

#ifndef USERKERNELS_HPP
#define USERKERNELS_HPP

const char userKernels[] =
	"__kernel void toFloatHDRImage(__global uchar4 *PM_dataIn, __global float4 *PM_dataOut) {\n"
	"	int PM_gid = get_global_id(0);\n"
	"	uchar4 PM_in = PM_dataIn[PM_gid];\n"
	"	float4 PM_out;\n"
	"	float PM_f;\n"
	"	if(PM_in.s3 != 0) {\n"
	"		PM_f = ldexp(1.0f, (PM_in.s3 & 0xFF) - (128 + 8));\n"
	"		PM_out.s0 = (PM_in.s0 & 0xFF) * PM_f;\n"
	"		PM_out.s1 = (PM_in.s1 & 0xFF) * PM_f;\n"
	"		PM_out.s2 = (PM_in.s2 & 0xFF) * PM_f;\n"
	"	} else {\n"
	"		PM_out.s0 = 0.0f;\n"
	"		PM_out.s1 = 0.0f;\n"
	"		PM_out.s2 = 0.0f;\n"
	"	}\n"
	"	PM_dataOut[PM_gid] = PM_out;\n"
	"}\n"
	"\n"
	"__kernel void foreach1(__global float4* PM_data) {\n"
	"	int PM_gid = get_global_id(0);\n"
	"	float4 pixel = PM_data[PM_gid]; \n"
	"                float result0, result1, result2;\n"
	"                float w;\n"
	"\n"
	"                result0 = result1 = result2 = 0.0f;\n"
	"                result0 += 0.5141364f * pixel.s0;\n"
	"                result0 += 0.3238786f * pixel.s1;\n"
	"                result0 += 0.16036376f * pixel.s2;\n"
	"                result1 += 0.265068f * pixel.s0;\n"
	"                result1 += 0.67023428f * pixel.s1;\n"
	"                result1 += 0.06409157f * pixel.s2;\n"
	"                result2 += 0.0241188f * pixel.s0;\n"
	"                result2 += 0.1228178f * pixel.s1;\n"
	"                result2 += 0.84442666f * pixel.s2;\n"
	"                w = result0 + result1 + result2;\n"
	"                if (w > 0.0) {\n"
	"                    pixel.s0 = result1;\n"
	"                    pixel.s1 = result0 / w;\n"
	"                    pixel.s2 = result1 / w;\n"
	"                } else {\n"
	"                    pixel.s0 = pixel.s1 = pixel.s2 = 0.0f;\n"
	"                }\n"
	"             PM_data[PM_gid] = pixel;\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void foreach2(__global float4* PM_data, float sum, __global float* PM_sum, float max, __global float* PM_max, int PM_width, int PM_height)\n"
	" {\n"
	"	for (int PM_y = 0; PM_y < PM_height; ++PM_y) {\n"
	"		for (int PM_x = 0; PM_x < PM_width; ++PM_x) {\n"
	"			float4 pixel = PM_data[PM_y*PM_width+PM_x];\n"
	"			sum += log(0.00001f + pixel.s0);\n"
	"\n"
	"			                if(pixel.s0 > max)\n"
	"			                    max = pixel.s0;\n"
	"			PM_data[PM_y*PM_width+PM_x] = pixel;\n"
	"		}\n"
	"	}\n"
	"	*PM_sum = sum;\n"
	"*PM_max = max;\n"
	"}\n"
	"\n"
	"__kernel void foreach3(__global float4* PM_data, float fScaleFactor, float fLmax2) {\n"
	"	int PM_gid = get_global_id(0);\n"
	"	float4 pixel = PM_data[PM_gid]; \n"
	"                \n"
	"                pixel.s0 *= fScaleFactor;\n"
	"\n"
	"                \n"
	"                pixel.s0 *= (1.0f + pixel.s0 / fLmax2) / (1.0f + pixel.s0);\n"
	"             PM_data[PM_gid] = pixel;\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void foreach4(__global float4* PM_data) {\n"
	"	int PM_gid = get_global_id(0);\n"
	"	float4 pixel = PM_data[PM_gid]; \n"
	"                float _x, _y, _z, g, b;\n"
	"\n"
	"                _y = pixel.s0;    \n"
	"                g = pixel.s1;   \n"
	"                b = pixel.s2;    \n"
	"\n"
	"                if (_y > 0.0f && g > 0.0f && b > 0.0f) {\n"
	"                    _x = g * _y / b;\n"
	"                    _z = _x / g - _x - _y;\n"
	"                } else {\n"
	"                    _x = _z = 0.0f;\n"
	"                }\n"
	"\n"
	"                \n"
	"                pixel.s0 = pixel.s1 = pixel.s2 = 0.0f;\n"
	"                pixel.s0 += 2.5651f * _x;\n"
	"                pixel.s0 += -1.1665f * _y;\n"
	"                pixel.s0 += -0.3986f * _z;\n"
	"                pixel.s1 += -1.0217f * _x;\n"
	"                pixel.s1 += 1.9777f * _y;\n"
	"                pixel.s1 += 0.0439f * _z;\n"
	"                pixel.s2 += 0.0753f * _x;\n"
	"                pixel.s2 += -0.2543f * _y;\n"
	"                pixel.s2 += 1.1892f * _z;\n"
	"             PM_data[PM_gid] = pixel;\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void foreach5(__global float4* PM_data, float power) {\n"
	"	int PM_gid = get_global_id(0);\n"
	"	float4 pixel = PM_data[PM_gid]; \n"
	"                \n"
	"                if (pixel.s0 > 1.0f) pixel.s0 = 1.0f;\n"
	"                if (pixel.s1 > 1.0f) pixel.s1 = 1.0f;\n"
	"                if (pixel.s2 > 1.0f) pixel.s2 = 1.0f;\n"
	"\n"
	"                pixel.s0 = (float) pow(pixel.s0, power);\n"
	"                pixel.s1 = (float) pow(pixel.s1, power);\n"
	"                pixel.s2 = (float) pow(pixel.s2, power);\n"
	"             PM_data[PM_gid] = pixel;\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void toBitmapHDRImage(__global float4 *PM_dataIn, __global uchar4 *PM_dataOut) {\n"
	"	int PM_gid = get_global_id(0);\n"
	"	float4 PM_in = PM_dataIn[PM_gid];\n"
	"	uchar4 PM_out;\n"
	"	PM_out.x = (uchar) (255.0f * PM_in.s0);\n"
	"	PM_out.y = (uchar) (255.0f * PM_in.s1);\n"
	"	PM_out.z = (uchar) (255.0f * PM_in.s2);\n"
	"	PM_out.w = 255;\n"
	"	PM_dataOut[PM_gid] = PM_out;\n"
	"}\n"
	"\n";
#endif
