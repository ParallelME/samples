/**                                               _    __ ____
 *   _ __  ___ _____   ___   __  __   ___ __     / |  / /  __/
 *  |  _ \/ _ |  _  | / _ | / / / /  / __/ /    /  | / / /__
 *  |  __/ __ |  ___|/ __ |/ /_/ /__/ __/ /__  / / v  / /__
 *  |_| /_/ |_|_|\_\/_/ |_/____/___/___/____/ /_/  /_/____/
 *
 * Code created automatically by ParallelME compiler.
 */

#ifndef USERKERNELS_HPP
#define USERKERNELS_HPP

const char userKernels[] =
	"__kernel void toFloat(__global uchar4 *__dataIn, __global float4 *__dataOut) {\n"
	"	int __gid = get_global_id(0);\n"
	"	uchar4 __in = __dataIn[__gid];\n"
	"	float4 __out;\n"
	"	float __f;\n"
	"	if(__in.s3 != 0) {\n"
	"		__f = ldexp(1.0f, (__in.s3 & 0xFF) - (128 + 8));\n"
	"		__out.s0 = (__in.s0 & 0xFF) * __f;\n"
	"		__out.s1 = (__in.s1 & 0xFF) * __f;\n"
	"		__out.s2 = (__in.s2 & 0xFF) * __f;\n"
	"	} else {\n"
	"		__out.s0 = 0.0f;\n"
	"		__out.s1 = 0.0f;\n"
	"		__out.s2 = 0.0f;\n"
	"	}\n"
	"	__dataOut[__gid] = __out;\n"
	"}\n"
	"\n"
	"__kernel void iterator1(__global float4 *__data) {\n"
	"	int __gid = get_global_id(0);\n"
	"	float4 pixel = __data[__gid]; \n"
	"                float result0, result1, result2;\n"
	"                float w;\n"
	"\n"
	"                result0 = result1 = result2 = 0.0f;\n"
	"                result0 += 0.5141364f * pixel.s0;\n"
	"                result0 += 0.3238786f * pixel.s1;\n"
	"                result0 += 0.16036376f * pixel.s2;\n"
	"                result1 += 0.265068f * pixel.s0;\n"
	"                result1 += 0.67023428f * pixel.s1;\n"
	"                result1 += 0.06409157f * pixel.s2;\n"
	"                result2 += 0.0241188f * pixel.s0;\n"
	"                result2 += 0.1228178f * pixel.s1;\n"
	"                result2 += 0.84442666f * pixel.s2;\n"
	"                w = result0 + result1 + result2;\n"
	"                if (w > 0.0) {\n"
	"                    pixel.s0 = result1;\n"
	"                    pixel.s1 = result0 / w;\n"
	"                    pixel.s2 = result1 / w;\n"
	"                } else {\n"
	"                    pixel.s0 = pixel.s1 = pixel.s2 = 0.0f;\n"
	"                }\n"
	"             __data[__gid] = pixel;\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void iterator2(__global float4 *__data, float sum, __global float *__sum, float max, __global float *__max, int __width, int __height)\n"
	" {\n"
	"	for (int __y = 0; __y < __height; ++__y) {\n"
	"		for (int __x = 0; __x < __width; ++__x) {\n"
	"			float4 pixel = __data[__y*__width+__x];\n"
	"			sum += log(0.00001f + pixel.s0);\n"
	"\n"
	"			                if(pixel.s0 > max)\n"
	"			                    max = pixel.s0;\n"
	"			__data[__y*__width+__x] = pixel;\n"
	"		}\n"
	"	}\n"
	"	*__sum = sum;\n"
	"*__max = max;\n"
	"}\n"
	"\n"
	"__kernel void iterator3(__global float4 *__data, float fScaleFactor, float fLmax2) {\n"
	"	int __gid = get_global_id(0);\n"
	"	float4 pixel = __data[__gid]; \n"
	"                \n"
	"                pixel.s0 *= fScaleFactor;\n"
	"\n"
	"                \n"
	"                pixel.s0 *= (1.0f + pixel.s0 / fLmax2) / (1.0f + pixel.s0);\n"
	"             __data[__gid] = pixel;\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void iterator4(__global float4 *__data) {\n"
	"	int __gid = get_global_id(0);\n"
	"	float4 pixel = __data[__gid]; \n"
	"                float _x, _y, _z, g, b;\n"
	"\n"
	"                _y = pixel.s0;    \n"
	"                g = pixel.s1;   \n"
	"                b = pixel.s2;    \n"
	"\n"
	"                if (_y > 0.0f && g > 0.0f && b > 0.0f) {\n"
	"                    _x = g * _y / b;\n"
	"                    _z = _x / g - _x - _y;\n"
	"                } else {\n"
	"                    _x = _z = 0.0f;\n"
	"                }\n"
	"\n"
	"                \n"
	"                pixel.s0 = pixel.s1 = pixel.s2 = 0.0f;\n"
	"                pixel.s0 += 2.5651f * _x;\n"
	"                pixel.s0 += -1.1665f * _y;\n"
	"                pixel.s0 += -0.3986f * _z;\n"
	"                pixel.s1 += -1.0217f * _x;\n"
	"                pixel.s1 += 1.9777f * _y;\n"
	"                pixel.s1 += 0.0439f * _z;\n"
	"                pixel.s2 += 0.0753f * _x;\n"
	"                pixel.s2 += -0.2543f * _y;\n"
	"                pixel.s2 += 1.1892f * _z;\n"
	"             __data[__gid] = pixel;\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void iterator5(__global float4 *__data, float power) {\n"
	"	int __gid = get_global_id(0);\n"
	"	float4 pixel = __data[__gid]; \n"
	"                \n"
	"                if (pixel.s0 > 1.0f) pixel.s0 = 1.0f;\n"
	"                if (pixel.s1 > 1.0f) pixel.s1 = 1.0f;\n"
	"                if (pixel.s2 > 1.0f) pixel.s2 = 1.0f;\n"
	"\n"
	"                pixel.s0 = (float) pow(pixel.s0, power);\n"
	"                pixel.s1 = (float) pow(pixel.s1, power);\n"
	"                pixel.s2 = (float) pow(pixel.s2, power);\n"
	"             __data[__gid] = pixel;\n"
	"\n"
	"}\n"
	"\n"
	"__kernel void toBitmapHDRImage(__global float4 *__dataIn, __global uchar4 *__dataOut) {\n"
	"	int __gid = get_global_id(0);\n"
	"	float4 __in = __dataIn[__gid];\n"
	"	uchar4 __out;\n"
	"	__out.x = (uchar) (255.0f * __in.s0);\n"
	"	__out.y = (uchar) (255.0f * __in.s1);\n"
	"	__out.z = (uchar) (255.0f * __in.s2);\n"
	"	__out.w = 255;\n"
	"	__dataOut[__gid] = __out;\n"
	"}\n"
	"\n";
#endif
